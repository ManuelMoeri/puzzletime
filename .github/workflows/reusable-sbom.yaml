name: Generate and push an SBOM dependency list

on:
  workflow_call:
    inputs:
      environment:
        type: string
        description: "Environment to build in"
        required: true
      project_name:
        type: string
        description: "Project name to report to dependency track"
        required: true
      
    secrets:
      dependency_track_url:
        description: "Base URL of the dependency track instance"
        required: true
      dependency_track_api_key:
        description: "API key to use for sending data to dependency track"
        required: true

jobs:
  generate-and-push-sbom:
    runs-on: 'ubuntu-latest'
    environment: ${{ inputs.environment }}
    env:
      HEADLESS: true
      RAILS_TEST_DB_NAME: 'postgres'
      RAILS_TEST_DB_USERNAME: 'postgres'
      RAILS_TEST_DB_PASSWORD: 'postgres'
      RAILS_ENV: 'test'
      CI: 'true'
      PGDATESTYLE: German

    services:
      postgres:
        image: 'postgres:11'
        env:
          POSTGRES_PASSWORD: 'postgres'
        ports: [ '5432:5432' ]
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 10s
          --health-retries 10
      memcached:
        image: 'memcached'
        ports: [ '11211:11211' ]

    steps:
      # - uses: ruby/setup-ruby@v1
      #   env:
      #     ImageOS: ubuntu20
      #
      # - uses: actions/setup-node@v4
      #   with:
      #     node-version: '20'
      #
      # - run: sudo apt-get -qq update
      # - run: cp Gemfile.lock Gemfile.lock.backup
      #
      # - uses: actions/cache@v3
      #   with:
      #     path: vendor/bundle
      #     key: ${{ runner.os }}-ruby-bundle-${{ hashFiles('**/Gemfile.lock.backup') }}
      #     restore-keys: |
      #       ${{ runner.os }}-ruby-bundle-
      #
      # - name: 'Bundle install core'
      #   run: bundle install --jobs 4 --retry 3 --path vendor/bundle
      #
      # - name: 'Make changes to Gemfile.lock transparent'
      #   run: git diff Gemfile.lock || true
      #
      # - uses: actions/cache@v3
      #   with:
      #     path: node_modules
      #     key: ${{ runner.os }}-node_modules-${{ hashFiles('**/yarn.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-node_modules-
      #
      # - name: 'Yarn install'
      #   run: |
      #     yarn install --frozen-lockfile
      #
      # - name: 'Remove installed dependency code, because lockfiles in there would yield false positives with cdxgen. We are only interested in our own lockfiles.'
      #   run: |
      #     rm -rf vendor
      #     rm -rf node_modules

      - uses: actions/checkout@v4
      - name: 'Generate SBOM for ruby dependencies'
        env:
          SCAN_DEBUG_MODE: debug
        run: |
          npm install -g @cyclonedx/cdxgen
          cdxgen -o ./sbom-ruby.xml -t ruby --spec-version 1.4 .
      - name: 'Generate SBOM for npm dependencies'
        run: |
          npm install -g @cyclonedx/cdxgen
          cdxgen -o ./sbom-npm.xml -t npm --spec-version 1.4 .

      - name: 'Merge frontend and backend SBOMs'
        run: |
          docker run \
                 --rm \
                 -v $(pwd):/data \
                 cyclonedx/cyclonedx-cli \
                 merge \
                 --input-files data/sbom-ruby.xml data/sbom-npm.xml \
                 --output-file data/sbom.xml
      
      - name: 'Push merged SBOM to dependency track'
        run: |
          curl --verbose \
               -s \
               --location \
               --request POST ${{ secrets.dependency_track_url }}/api/v1/bom \
               --header "X-Api-Key: ${{ secrets.dependency_track_api_key }}" \
               --header "Content-Type: multipart/form-data" \
               --form "autoCreate=true" \
               --form "projectName=${{ inputs.project_name }}" \
               --form "projectVersion=latest" \
               --form "bom=@sbom.xml"
      
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sboms
          path: |
            ./sbom-npm.xml
            ./sbom-ruby.xml
            ./sbom.xml
